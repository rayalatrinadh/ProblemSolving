Problem_01
Status : Solved
Remarks : yet to solve in Efficient way

3190. Find Minimum Operations to Make All Elements Divisible by Three

class Solution {
    public int minimumOperations(int[] nums) {
        int n = nums.length;
        if(n < 1)
            return 0;
        int count = 0;
        
        for(int i = 0; i < n; i++){
            if(nums[i] % 3 == 0)
                continue;
            else{
                int getNum = nums[i]- 1;
                if(getNum % 3 == 0){
                count += 1;
                continue;
                }
                getNum = nums[i] + 1;
                if(getNum %  3 == 0)
                    count += 1;
                    
            }
        }
        return count;
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Problem_02
Status : Solved
Remarks : yet to solve in Efficient way i.e O(N)..?

3191. Minimum Operations to Make Binary Array Elements Equal to One I
class Solution {
    public int minOperations(int[] nums) {
        int n = nums.length;
        if(n < 1)
            return -1;
        
        int ans = -1, count = 0, i = 0;
       // System.out.println("start Array : " + Arrays.toString(nums));
        for(i = 0; i <= n - 3; i++){
            if(nums[i] == 1)
                continue;
            
            for(int j = i; j < i+3; j++){
                if(nums[j] == 0)
                    nums[j] = 1;
                
                else if(nums[j] == 1) nums[j] = 0;
            }
            count++;
            //System.out.println(" i : " + i + " : " + Arrays.toString(nums));
        }
        
        for(int j = i; j < n; j++){
            if(nums[j] == 0){
               count = -1;
                break;
            }
        }
        return count;
        
    }
}

--------------------------------------------------------------------------------------------

Problem_03
Status : Tried but Get Time Limit Exceeded
Remarks : yet to solve in Efficient way
LEARNING PATTERN : How to Iterate the array within Less than O(N) by using 1 for loop
        -> by using two pointer concept, we can iterate the array less than O(N/2).. is it given feasibility to decrease the half of the time to iterate the array...???

class Solution {
    public int minOperations(int[] nums) {
         int n = nums.length;
         if(n < 1)
             return -1;
        
        int count = 0;
        
        for(int i = 0; i < n; i++){
            if(nums[i] == 1)
                continue;
            
            // for(int j = i; j < n; j++){
            //     if(nums[j] == 0) nums[j] = 1;
            //     else if(nums[j] == 1) nums[j] = 0;
            // }
            
            int fromStart = i, fromEnd = n - 1;
            
            while(fromStart <= fromEnd){
                if(fromStart == fromEnd){
                    if(nums[fromStart] == 0) nums[fromStart] = 1;
                else if(nums[fromStart] == 1) nums[fromStart] = 0;
                    
                    count++;
                    continue;
                }
                if(nums[fromStart] == 0) nums[fromStart] = 1;
                else if(nums[fromStart] == 1) nums[fromStart] = 0;
                
                if(nums[fromEnd] == 0) nums[fromEnd] = 1;
                else if(nums[fromEnd] == 1) nums[fromEnd] = 0;
                
                fromStart++;
                fromEnd--;
            }
            count++;
        }
        
        return count;
    }
}

---------------------------------------------------------------------------------------

Problem_04
Status : not
3193. Count the Number of Inversions


