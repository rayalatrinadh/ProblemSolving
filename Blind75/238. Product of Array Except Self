//Brute Force
//Time Complexity : O(N) + O(N) + O(N) = O(3N) => O(N)
//Space Complexity : O(N) + O(N) + O(N) = O(3N) => O(N)


class Solution {
    public int[] productExceptSelf(int[] nums) {


       //bruteForce
        int n = nums.length;
        int[] ans = new int[n];

        for(int i = 0; i < n; i++){
            int product = 1; 

            for(int j = 0; j < n; j++){
                if(i != j)
                product *= nums[j];
            }
            ans[i] = product;
        }
        return ans; 

        //better
        int[] preFix = new int[nums.length];
        int[] postFix = new int[nums.length];
        int[] ans = new int[nums.length];

        preFix[0] = nums[0];
        for(int i = 1; i < nums.length; i++){
            preFix[i] = nums[i] * preFix[i-1];
        }

        postFix[nums.length-1] = nums[nums.length-1];
        for(int i = nums.length - 2; i >= 0; i--){
            postFix[i] = nums[i] * postFix[i+1];
        }
        
        ans[0] = postFix[1];
        ans[nums.length-1] = preFix[nums.length-2];
        
        for(int i = 1; i < nums.length-1; i++){
            ans[i] = preFix[i-1] * postFix[i+1];
        }

        return ans;

    }
}
