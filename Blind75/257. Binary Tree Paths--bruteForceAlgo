/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> ans = new ArrayList<>();
        List<String> temp = new ArrayList<>();

        treePath(root,ans,temp);
        
        return ans;
    }
    private static void treePath(TreeNode root, List<String> ans, List<String> temp){
        if(root == null) return;

        temp.add(root.val+"");
        treePath(root.left,ans,temp);
        treePath(root.right,ans,temp);

        if(root.right == null && root.left == null){
            String tempString = "";
            for(int i = 0; i < temp.size(); i++){
                if(i != temp.size()-1) tempString += (temp.get(i)+"->");
                else tempString += temp.get(i);
            }
            ans.add(tempString);
        }
            temp.remove(temp.size()-1);
    }
}
