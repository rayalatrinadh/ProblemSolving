class Solution {
     public static int maxAns = 1;
    public  int lengthOfLIS(int[] nums) {
        maxAns = 1;
        int n = nums.length;

        if(n < 1) return 0;
        List<Integer> list = new ArrayList();

          findLIS(0,nums, list);
         return maxAns;
    }

    private static void findLIS(int index, int[] nums, List<Integer> list){

        if(index >= nums.length){
            int tempAns = checkLIS(list);
            if(maxAns < tempAns) maxAns = tempAns;
            return;
        }
        list.add(nums[index]);
        findLIS(index+1, nums, list);
        list.remove(list.size()-1);
        findLIS(index+1,nums,list);
    }

    private static int checkLIS(List<Integer> list){\
        int n = list.size();
        if(n < 1) return 0;

       for(int i = 1; i < n; i++){
        if(list.get(i) <= list.get(i-1)) return 1;
       }

        return n;
    }
}


//=======================================

class Solution {
    public int lengthOfLIS(int[] nums) {
        
        if(nums.length < 1) return 0;

        return traverseLIS(nums,0,-1);
    }

    private static int traverseLIS(int[] nums, int index, int prev_index){
        if(index >= nums.length) return 0;

        int len = 0 + traverseLIS(nums,index+1,prev_index);

        if(prev_index == -1 || nums[index] > nums[prev_index]){
            len = Math.max(len, 1 + traverseLIS(nums,index+1, index));
        }
        return len;
    }
}


//==============================================



Momoization

class Solution {
    public int lengthOfLIS(int[] nums) {
        
        if(nums.length < 1) return 0;
        int n = nums.length;
        int[][] dp = new int[n][n+1];
        for(int row[] : dp){
            Arrays.fill(row,-1);
        }

        return traverseLIS(nums,0,-1,dp);
    }

    private static int traverseLIS(int[] nums, int index, int prev_index,int[][] dp){
        if(index >= nums.length) return 0;

        if(dp[index][prev_index+1] != -1) return dp[index][prev_index+1];

        int len = 0 + traverseLIS(nums,index+1,prev_index,dp);

        if(prev_index == -1 || nums[index] > nums[prev_index]){
            len = Math.max(len, 1 + traverseLIS(nums,index+1, index,dp));
        }
        return dp[index][prev_index+1] = len;
    }
}





