package com.DataStructuresPreperation;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

public class NumberOfProvinces {

    public int numProvinces(int[][] adj) {

        int V = adj.length;
        List<Integer>[] adjList = new ArrayList[V];

        for (int i = 0; i < V; ++i) {
            adjList[i] = new ArrayList<>();
        }

        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (adj[i][j] == 1 && i != j) {
                    adjList[i].add(j);
                    adjList[j].add(i);
                }
            }
        }

        boolean[] vis = new boolean[V];
        int count = 0;

        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                count++;
                bfs(i, adjList, vis);
            }
        }
        return count;
    }

    public void bfs(int node, List<Integer>[] adjList, boolean[] vis) {

        vis[node] = true;
        Queue<Integer> q = new LinkedList<>();
        q.add(node);

        while (!q.isEmpty()) {
            int i = q.poll();
            for (int adjNode : adjList[i]) {
                if (!vis[adjNode]) {
                    vis[adjNode] = true;
                    q.add(adjNode);
                }
            }
        }

    }

    public static void main(String[] args) {
        int[][] adj = {
                {1, 0, 0, 1},
                {0, 1, 1, 0},
                {0, 1, 1, 0},
                {1, 0, 0, 1}
        };

        /* Creating an instance of
        Solution class */
        NumberOfProvinces sol = new NumberOfProvinces();

        /* Function call to find the
        provinces in the given graph */
        int ans = sol.numProvinces(adj);

        System.out.println("The number of provinces in the given graph is: " + ans);
    }
}
