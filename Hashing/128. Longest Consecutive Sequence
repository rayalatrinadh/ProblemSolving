//Brute Force Algorithm - Time Limit Exceeded ❌❌❌
class Solution {
    public int longestConsecutive(int[] nums) {
        int n = nums.length, maxLen = 1;

        if(n < 1) return 0;

        Set<Integer> set = new HashSet<>();

        for (int i = 0; i < n; i++) {
            set.add(nums[i]);

            int tempV = nums[i];

            if (set.contains(tempV - 1)) {
                while (set.contains(tempV - 1)) {
                    tempV -= 1;
                }
                int count = 1;

                while (set.contains(tempV + 1)) {
                    tempV += 1;
                    count += 1;
                }

                maxLen = Math.max(maxLen, count);
            } else if (set.contains(tempV + 1)) {
                int count = 1;

                while (set.contains(tempV + 1)) {
                    tempV += 1;
                    count += 1;
                }
                maxLen = Math.max(maxLen, count);
            }
        }

        return maxLen;
    }
}

----------------------------------------------------------------------------

//brute Force with inbuilt function (Arrays.sort()) 👎👎👎
class Solution {
    public int longestConsecutive(int[] nums) {
         Arrays.sort(nums);

        if(nums.length < 1)return 0;

        int count = 1, maxLen = 0;

        for(int present = 1; present < nums.length; present++){
            if(nums[present] - nums[present-1] == 1 || nums[present] - nums[present-1] == -1){
                ++count;
            }else if(nums[present] == nums[present-1]){
                continue;
            }else{
                maxLen = Math.max(maxLen,count);
                count = 1;
            }
        }

        maxLen = Math.max(maxLen, count);

        return maxLen;
    }
}

//---------------------------------------------

Optimal Solution ✅💯
class Solution {
    public int longestConsecutive(int[] nums) {
        
        if(nums.length < 0 ) return 0;
       int n = nums.length;

        Set<Integer> set = new HashSet<>();

        for(int i = 0; i < n; i++){
            set.add(nums[i]);
        }
        int longest = 0;

        for(int setElement : set){

            if(!set.contains(setElement-1)){

                int x = setElement;
                int count = 1;

                while(set.contains(x+1)){
                    x += 1;
                    count += 1;
                }
                longest = Math.max(longest, count);
            }
        }
        return longest;
    }
}

