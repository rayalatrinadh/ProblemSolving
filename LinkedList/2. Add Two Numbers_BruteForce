/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {

        ListNode ansNode = null;
        ListNode newNode = null;
        ListNode temp = null;
        int sum = 0;
        while(l1 != null & l2 != null){
            sum = sum + l1.val + l2.val;
            if(sum <= 9){
                newNode = new ListNode(sum);
                sum = 0;
            }else{
                newNode = new ListNode(sum%10);
                sum = sum / 10;
            }

            if(ansNode == null){
                ansNode = newNode;
            }else{
                temp = ansNode;
                while(temp.next != null){
                    temp = temp.next;
                }
                temp.next = newNode;
            }
            l1 = l1.next;
            l2 = l2.next;
        }
        while(l1 != null){
            sum = sum + l1.val;
            if(sum <= 9){
                newNode = new ListNode(sum);
                sum = 0;
            }else{
                    newNode = new ListNode(sum%10);
                    sum = sum/10;
            }
            temp = ansNode;
            while(temp.next != null){
                temp = temp.next;
            }
            temp.next = newNode;
            l1 = l1.next;
        }



        while(l2 != null){
            sum = sum + l2.val;
            if(sum <= 9){
                newNode = new ListNode(sum);
                sum = 0;
            }else{
                    newNode = new ListNode(sum%10);
                    sum = sum/10;

            }
            temp = ansNode;
            while(temp.next != null){
                temp = temp.next;
            }
            temp.next = newNode;
            l2 = l2.next;

        }

        if(sum != 0){
            newNode = new ListNode(sum);
            sum = 0;
            temp = ansNode;
            while(temp.next != null){
                temp = temp.next;
            }
            temp.next = newNode;
        }
        return ansNode;
        
    }
}

