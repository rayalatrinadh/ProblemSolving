BRUTE FORCE ALGORITHM:
TIME COMPLEXITY : O(m+n)
SPACE COMPLEXITY : O(m+n)

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {

        if(list1 == null)
          return list2;
        else if(list2 == null)
          return list1;
        else if(list1 == null && list2 == null)
           return list1;
        ListNode temp = null;
        ListNode ans = null;
        ListNode prev = null;
        
        while(list1 != null && list2 != null){
            if(list1.val <= list2.val){
                temp = new ListNode(list1.val);
                list1 = list1.next;
                
            }else if(list1.val > list2.val){
                temp = new ListNode(list2.val);
                list2 = list2.next;
            }

            if(ans == null){
                ans = temp;
                prev = ans;
            }else{
                prev.next = temp;
                prev = prev.next;
            }

    
        }
        while(list1 != null){
            temp = new ListNode(list1.val);
            prev.next = temp;
            prev = prev.next;

            list1 = list1.next;
        }

        while(list2 != null){
            temp = new ListNode(list2.val);
            prev.next = temp;
            prev = prev.next;

            list2 = list2.next;
        }

        return ans;
    }
}

//===================================================================================
timeComplexity O(m+n)
spaceComplexity O(1)

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {

        if(list1 == null)
          return list2;
        else if(list2 == null)
          return list1;
        else if(list1 == null && list2 == null)
           return list1;
        ListNode ans = new ListNode(-1);
        ListNode prev = ans;

        while(list1 != null && list2 != null){
            if(list1.val <= list2.val){
                prev.next = list1;
                list1 = list1.next;
            }else{
                prev.next = list2;
                list2 = list2.next;
            }
            prev = prev.next;
        }

        if(list1 != null){
            prev.next = list1;
        }

        if(list2 != null){
            prev.next = list2;
        }
        
        return ans.next;
    }
}
