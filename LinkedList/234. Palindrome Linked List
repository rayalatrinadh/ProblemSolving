/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {

        if(head == null)
          return false;

        ListNode slow = head;
        ListNode fast = head;
        ListNode prev = null;


        while(fast != null && fast.next != null){
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }

            prev = null;
            ListNode slowTemp = slow;
            while(slowTemp != null){
                slowTemp = slowTemp.next;
            }
        ListNode reverseListHead = reverseTheList(slow);
        while(reverseListHead != null && head != null){
            if(head.val != reverseListHead.val)
              return false;

            reverseListHead = reverseListHead.next;
            head = head.next;
        }
        return true;
        
    }

    ListNode reverseTheList(ListNode head){
        ListNode prev = null;

        while(head != null && head.next !=null){
        ListNode temp = head.next;
        head.next = prev;
        prev = head;
        head = temp;
        }
        if(head != null){
            head.next = prev;
        }
        return head;
    }
}
