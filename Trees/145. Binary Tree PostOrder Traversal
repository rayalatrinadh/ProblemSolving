time complexity : O(N)
space Complexity : O(N)

methodology 1 : by using Recursion
class Solution {
    List<Integer> ans = new ArrayList<Integer>();
    public List<Integer> postorderTraversal(TreeNode root) {
        postOrder(root);
        return ans;
    }

    public void postOrder(TreeNode root){
        if(root == null)
        return;

        postOrder(root.left);
        postOrder(root.right);
        ans.add(root.val);
    }
}

methodology 2 : by using LinkedList and Stack Data Structure
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
	LinkedList<Integer> ans = new LinkedList<>();
	Stack<TreeNode> stack = new Stack<>();
	if (root == null) return ans;
	
	stack.push(root);
	while (!stack.isEmpty()) {
		TreeNode cur = stack.pop();
		ans.addFirst(cur.val);
		if (cur.left != null) {
			stack.push(cur.left);
		}
		if (cur.right != null) {
			stack.push(cur.right);
		} 
	}
	return ans;
}
}
