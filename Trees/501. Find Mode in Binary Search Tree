/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
   public static  Map<Integer,Integer> map = new HashMap<>();

    public static void dfs(TreeNode root){
        if(root == null)
        return;

        System.out.println("value : "+ root.val);

        if(root != null && root.right != null)
         dfs(root.right);


         if(!map.containsKey(root.val)){
             map.put(root.val,1);
         }else{
             int getMapValue = map.get(root.val);
             map.put(root.val,getMapValue+1);
         }
         if(root != null && root.left != null)
         dfs(root.left);
    }


    public int[] findMode(TreeNode root) {
    
    dfs(root);
    int key = Collections.max(map.entrySet(), Map.Entry.comparingByValue()).getKey();
    int keyValue = map.get(key);
    System.out.println("keyValue : " + map.get(key));


    ArrayList<Integer> list = new ArrayList<>();
    for(Map.Entry<Integer,Integer> entry : map.entrySet()){
        int getKey = entry.getKey();
        int value = entry.getValue();

        if(value == keyValue){
            list.add(getKey);
        }
       
    }
     int[] arr = list.stream().mapToInt(i -> i).toArray();
     map = new HashMap<>();
     return arr;

    }
}
