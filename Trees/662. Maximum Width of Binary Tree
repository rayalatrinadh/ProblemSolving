Time Complexity : O(N);
Space Complexity : O(N);
 
 
 class Pair{
     TreeNode root = null;
     int value = 0;

     Pair(TreeNode root, int value){
         this.root = root;
         this.value = value;
     }
 }
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root == null)
        return 0;
        Queue<Pair> q = new LinkedList<>();
        q.offer(new Pair(root,0));
        int ans = 0;
        while(!q.isEmpty()){
            int size = q.size();
            int mmin = q.peek().value;
            int first = 0, last = 0;
            for(int i = 0; i < size; i++){
                int curId = q.peek().value - mmin;
                TreeNode curRoot = q.peek().root;

                q.poll();
                if(i == 0) first = curId;
                if(i == size - 1) last = curId;

                if(curRoot.left != null)
                q.offer(new Pair(curRoot.left, 2*curId+1));
                
                if(curRoot.right != null)
                q.offer(new Pair(curRoot.right, 2*curId+2));
            }
            ans = Math.max(ans, last-first+1);
        }
        return ans;
    }
}
